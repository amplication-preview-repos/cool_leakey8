/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BarcodeRecord } from "./BarcodeRecord";
import { BarcodeRecordCountArgs } from "./BarcodeRecordCountArgs";
import { BarcodeRecordFindManyArgs } from "./BarcodeRecordFindManyArgs";
import { BarcodeRecordFindUniqueArgs } from "./BarcodeRecordFindUniqueArgs";
import { CreateBarcodeRecordArgs } from "./CreateBarcodeRecordArgs";
import { UpdateBarcodeRecordArgs } from "./UpdateBarcodeRecordArgs";
import { DeleteBarcodeRecordArgs } from "./DeleteBarcodeRecordArgs";
import { BarcodeRecordService } from "../barcodeRecord.service";
@graphql.Resolver(() => BarcodeRecord)
export class BarcodeRecordResolverBase {
  constructor(protected readonly service: BarcodeRecordService) {}

  async _barcodeRecordsMeta(
    @graphql.Args() args: BarcodeRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BarcodeRecord])
  async barcodeRecords(
    @graphql.Args() args: BarcodeRecordFindManyArgs
  ): Promise<BarcodeRecord[]> {
    return this.service.barcodeRecords(args);
  }

  @graphql.Query(() => BarcodeRecord, { nullable: true })
  async barcodeRecord(
    @graphql.Args() args: BarcodeRecordFindUniqueArgs
  ): Promise<BarcodeRecord | null> {
    const result = await this.service.barcodeRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BarcodeRecord)
  async createBarcodeRecord(
    @graphql.Args() args: CreateBarcodeRecordArgs
  ): Promise<BarcodeRecord> {
    return await this.service.createBarcodeRecord({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BarcodeRecord)
  async updateBarcodeRecord(
    @graphql.Args() args: UpdateBarcodeRecordArgs
  ): Promise<BarcodeRecord | null> {
    try {
      return await this.service.updateBarcodeRecord({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BarcodeRecord)
  async deleteBarcodeRecord(
    @graphql.Args() args: DeleteBarcodeRecordArgs
  ): Promise<BarcodeRecord | null> {
    try {
      return await this.service.deleteBarcodeRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
