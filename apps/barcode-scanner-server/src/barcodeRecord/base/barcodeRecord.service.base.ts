/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BarcodeRecord as PrismaBarcodeRecord } from "@prisma/client";

export class BarcodeRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BarcodeRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.barcodeRecord.count(args);
  }

  async barcodeRecords(
    args: Prisma.BarcodeRecordFindManyArgs
  ): Promise<PrismaBarcodeRecord[]> {
    return this.prisma.barcodeRecord.findMany(args);
  }
  async barcodeRecord(
    args: Prisma.BarcodeRecordFindUniqueArgs
  ): Promise<PrismaBarcodeRecord | null> {
    return this.prisma.barcodeRecord.findUnique(args);
  }
  async createBarcodeRecord(
    args: Prisma.BarcodeRecordCreateArgs
  ): Promise<PrismaBarcodeRecord> {
    return this.prisma.barcodeRecord.create(args);
  }
  async updateBarcodeRecord(
    args: Prisma.BarcodeRecordUpdateArgs
  ): Promise<PrismaBarcodeRecord> {
    return this.prisma.barcodeRecord.update(args);
  }
  async deleteBarcodeRecord(
    args: Prisma.BarcodeRecordDeleteArgs
  ): Promise<PrismaBarcodeRecord> {
    return this.prisma.barcodeRecord.delete(args);
  }
}
